---
- name: Preapre all hosts
  hosts: all
  tasks:
    - name: Create group
      become: true
      group:
        name: "{{ user_group }}"
        state: present
    - name: Create user
      become: true
      user:
        name: "{{ user_name }}"
        generate_ssh_key: true
      register: ssh_key_info
    - name: Install JDK
      become: true
      package:
        name: "{{ java_packages }}"
        state: present

- name: Get Jenkins master installed
  hosts: jenkins_masters
  tasks:
    - name: Get repo Jenkins
      become: true
      get_url:
        url: https://pkg.jenkins.io/redhat-stable/jenkins.repo
        dest: /etc/yum.repos.d/jenkins.repo
        validate_certs: false
    - name: Add Jenkins key
      become: true
      rpm_key:
        key: https://pkg.jenkins.io/redhat-stable/jenkins.io.key
        state: present
        validate_certs: false
    - name: Install epel-release
      become: true
      yum:
        name: epel-release
        state: present
    - name: Install Jenkins and requirements
      become: true
      yum:
        name:
          - jenkins
          - git
        state: present
      register: jenkins_installed
    - name: Ensure jenkins agents are present in known_hosts file
      become: true
      become_user: "{{ jenkins_user_name }}"
      known_hosts:
        name: "{{ hostvars[item].ansible_host }}"
        state: present
        key: "{{ lookup('pipe', 'ssh-keyscan {{ hostvars[item].ansible_host }}') }}"
        hash_host: true
      with_items: "{{ groups.jenkins_agents }}"
    - name: Start Jenkins
      become: true
      systemd:
        name: jenkins
        state: restarted
        enabled: true
      when: jenkins_installed is changed
      
- name: Prepare jenkins agent
  hosts: jenkins_agents
  become: true
  become_user: "{{ jenkins_user_name }}"
  tasks:
    - name: Add master publickey into authorized_key
      authorized_key:
        user: "{{ jenkins_user_name }}"
        state: present
        key: "{{ hostvars['jenkins-master-01']['ssh_key_info']['ssh_public_key'] }}"
    - name: Create agent_dir
      become_user: root
      file:
        path: "{{ jenkins_agent_dir }}"
        state: directory
        owner: "{{ jenkins_user_name }}"
        group: "{{ jenkins_user_group }}"
    - name: Add docker repo
      become_user: root
      get_url:
        url: https://download.docker.com/linux/centos/docker-ce.repo
        dest: /etc/yum.repos.d/docker-ce.repo
        validate_certs: false
    - name: Install some required
      become_user: root
      yum:
        name:
          - git
          - python3
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: present
    - name: Update pip
      become_user: root
      pip:
        executable: pip3
        name: pip
        extra_args: --upgrade
    - name: Install Ansible
      become_user: root
      pip:
        executable: pip3
        name:
          - selinux
          - ansible
          - molecule
          - molecule_docker
        state: present
    - name: Reinstall Selinux
      become_user: root
      pip:
        executable: pip3
        name:
          - selinux
        state: forcereinstall
    - name: Add local to PATH
      lineinfile:
        dest: ~/.bashrc
        regexp: export PATH=$PATH:/home/jenkins/.local/bin
        line: export PATH=$PATH:/home/jenkins/.local/bin
    - name: Create docker group
      become_user: root
      group:
        name: docker
        state: present
    - name: Add jenkinsuser to dockergroup
      become_user: root
      user:
        name: "{{ jenkins_user_name }}"
        groups: docker
    - name: Restart docker
      become_user: root
      systemd:
        name: docker
        state: restarted
        enabled: true
    - name: Install agent.jar
      get_url:
        url: "http://{{ hostvars['jenkins-master-01']['ansible_host'] }}:8080/jnlpJars/agent.jar"
        dest: "{{ jenkins_agent_dir }}"
      register: install_agent
      until: install_agent is succeeded
      retries: 10
      timeout: 10

# - name: Get Nexus installed
#   hosts: nexus
#   pre_tasks:
#     - name: Create Nexus group
#       become: true
#       group:
#         name: "{{ nexus_user_group }}"
#         state: present
#     - name: Create Nexus user
#       become: true
#       user:
#         name: "{{ nexus_user_name }}"
#     - name: Install JDK
#       become: true
#       package:
#         name: [java-1.8.0-openjdk, java-1.8.0-openjdk-devel]
#         state: present
#   tasks:
#     - name: Create Nexus directories
#       become: true
#       file:
#         group: "{{ nexus_user_group }}"
#         owner: "{{ nexus_user_name }}"
#         path: "{{ item }}"
#         state: directory
#       with_items:
#         - "{{ nexus_directory_log }}"
#         - "{{ nexus_directory_data }}"
#         - "{{ nexus_directory_data }}/etc"
#         - "{{ nexus_directory_package }}"
#         - "{{ nexus_directory_tmp }}"

#     - name: Download Nexus
#       become: true
#       become_user: "{{ nexus_user_name }}"
#       get_url:
#         dest: "{{ nexus_directory_package }}/nexus-{{ nexus_version }}.tar.gz"
#         url: "{{ nexus_download_url }}/nexus-{{ nexus_version }}-unix.tar.gz"
#         validate_certs: false

#     - name: Unpack Nexus
#       become: true
#       become_user: "{{ nexus_user_name }}"
#       unarchive:
#         copy: no
#         creates: "{{ nexus_directory_package }}/nexus-{{ nexus_version }}"
#         dest: "{{ nexus_directory_package }}"
#         src: "{{ nexus_directory_package }}/nexus-{{ nexus_version }}.tar.gz"

#     - name: Link to Nexus Directory
#       become: true
#       become_user: "{{ nexus_user_name }}"
#       file:
#         dest: "{{ nexus_directory_home }}"
#         src: "{{ nexus_directory_package }}/nexus-{{ nexus_version }}"
#         state: link

#     - name: Add NEXUS_HOME for Nexus user
#       become: true
#       become_user: "{{ nexus_user_name }}"
#       lineinfile:
#         create: yes
#         dest: "/home/{{ nexus_user_name }}/.bashrc"
#         insertafter: EOF
#         line: "export NEXUS_HOME={{ nexus_directory_home }}"

#     - name: Add run_as_user to Nexus.rc
#       become: true
#       become_user: "{{ nexus_user_name }}"
#       lineinfile:
#         create: yes
#         dest: "{{ nexus_directory_home }}/bin/nexus.rc"
#         insertafter: EOF
#         line: "run_as_user=\"{{ nexus_user_name }}\""
#         regexp: "^run_as_user"

#     - name: Raise nofile limit for Nexus user
#       become: true
#       pam_limits:
#         domain: "{{ nexus_user_name }}"
#         limit_type: "-"
#         limit_item: nofile
#         value: "{{ nexus_ulimit }}"

#     - name: Create Nexus service for SystemD
#       become: true
#       template:
#         dest: /lib/systemd/system/nexus.service
#         mode: 0644
#         src: nexus.systemd.j2

#     - name: Ensure Nexus service is enabled for SystemD
#       become: true
#       systemd:
#         daemon_reload: yes
#         enabled: yes
#         name: nexus
#       when:
#         - nexus_service_enabled

#     - name: Create Nexus vmoptions
#       become: true
#       become_user: "{{ nexus_user_name }}"
#       template:
#         dest: "{{ nexus_directory_home }}/bin/nexus.vmoptions"
#         src: nexus.vmoptions.j2
#       register: nexus_config_changed

#     - name: Create Nexus properties
#       become: true
#       become_user: "{{ nexus_user_name }}"
#       template:
#         dest: "{{ nexus_directory_data }}/etc/nexus.properties"
#         src: nexus.properties.j2
#       register: nexus_config_changed

#     - name: Lower Nexus disk space threshold
#       become: true
#       become_user: "{{ nexus_user_name }}"
#       lineinfile:
#         backrefs: yes
#         dest: "{{ nexus_directory_home }}/etc/karaf/system.properties"
#         insertafter: EOF
#         line: "storage.diskCache.diskFreeSpaceLimit={{ nexus_configuration_disk_free_space_limit }}"
#         regexp: ^storage\.diskCache\.diskFreeSpaceLimit
#       when: nexus_configuration_disk_free_space_limit is not none
#       register: nexus_config_changed

#     - name: Start Nexus service if enabled
#       become: true
#       service:
#         enabled: yes
#         name: nexus
#         state: started
#       when:
#         - nexus_service_start_on_boot
#         - not nexus_config_changed.changed
#       tags:
#         - skip_ansible_lint

#     - name: Ensure Nexus service is restarted
#       become: true
#       service:
#         name: nexus
#         state: restarted
#       when:
#         - nexus_service_start_on_boot
#         - nexus_config_changed.changed
#       tags:
#         - skip_ansible_lint

#     - name: Wait for Nexus port if started
#       wait_for:
#         port: "{{ nexus_port }}"
#         state: started
#         timeout: "{{ nexus_port_check_timeout }}"
#       when:
#         - nexus_service_start_on_boot

