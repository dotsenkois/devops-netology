GIT-STATUS(1)                                 Git Manual                                 GIT-STATUS(1)

NNAAMMEE
       git-status - Show the working tree status

SSYYNNOOPPSSIISS
       _g_i_t _s_t_a_t_u_s [<options>...] [--] [<pathspec>...]

DDEESSCCRRIIPPTTIIOONN
       Displays paths that have differences between the index file and the current HEAD commit, paths
       that have differences between the working tree and the index file, and paths in the working
       tree that are not tracked by Git (and are not ignored by ggiittiiggnnoorree(5)). The first are what you
       _w_o_u_l_d commit by running ggiitt ccoommmmiitt; the second and third are what you _c_o_u_l_d commit by running
       _g_i_t _a_d_d before running ggiitt ccoommmmiitt.

OOPPTTIIOONNSS
       -s, --short
           Give the output in the short-format.

       -b, --branch
           Show the branch and tracking info even in short-format.

       --show-stash
           Show the number of entries currently stashed away.

       --porcelain[=<version>]
           Give the output in an easy-to-parse format for scripts. This is similar to the short
           output, but will remain stable across Git versions and regardless of user configuration.
           See below for details.

           The version parameter is used to specify the format version. This is optional and defaults
           to the original version _v_1 format.

       --long
           Give the output in the long-format. This is the default.

       -v, --verbose
           In addition to the names of files that have been changed, also show the textual changes
           that are staged to be committed (i.e., like the output of ggiitt ddiiffff ----ccaacchheedd). If --vv is
           specified twice, then also show the changes in the working tree that have not yet been
           staged (i.e., like the output of ggiitt ddiiffff).

       -u[<mode>], --untracked-files[=<mode>]
           Show untracked files.

           The mode parameter is used to specify the handling of untracked files. It is optional: it
           defaults to _a_l_l, and if specified, it must be stuck to the option (e.g.  --uunnoo, but not --uu
           nnoo).

           The possible options are:

           •   _n_o - Show no untracked files.

           •   _n_o_r_m_a_l - Shows untracked files and directories.

           •   _a_l_l - Also shows individual files in untracked directories.

           When --uu option is not used, untracked files and directories are shown (i.e. the same as
           specifying nnoorrmmaall), to help you avoid forgetting to add newly created files. Because it
           takes extra work to find untracked files in the filesystem, this mode may take some time in
           a large working tree. Consider enabling untracked cache and split index if supported (see
           ggiitt uuppddaattee--iinnddeexx ----uunnttrraacckkeedd--ccaacchhee and ggiitt uuppddaattee--iinnddeexx ----sspplliitt--iinnddeexx), Otherwise you can
           use nnoo to have ggiitt ssttaattuuss return more quickly without showing untracked files.

           The default can be changed using the status.showUntrackedFiles configuration variable
           documented in ggiitt--ccoonnffiigg(1).

       --ignore-submodules[=<when>]
           Ignore changes to submodules when looking for changes. <when> can be either "none",
           "untracked", "dirty" or "all", which is the default. Using "none" will consider the
           submodule modified when it either contains untracked or modified files or its HEAD differs
           from the commit recorded in the superproject and can be used to override any settings of
           the _i_g_n_o_r_e option in ggiitt--ccoonnffiigg(1) or ggiittmmoodduulleess(5). When "untracked" is used submodules
           are not considered dirty when they only contain untracked content (but they are still
           scanned for modified content). Using "dirty" ignores all changes to the work tree of
           submodules, only changes to the commits stored in the superproject are shown (this was the
           behavior before 1.7.0). Using "all" hides all changes to submodules (and suppresses the
           output of submodule summaries when the config option ssttaattuuss..ssuubbmmoodduulleeSSuummmmaarryy is set).

       --ignored[=<mode>]
           Show ignored files as well.

           The mode parameter is used to specify the handling of ignored files. It is optional: it
           defaults to _t_r_a_d_i_t_i_o_n_a_l.

           The possible options are:

           •   _t_r_a_d_i_t_i_o_n_a_l - Shows ignored files and directories, unless --untracked-files=all is
               specified, in which case individual files in ignored directories are displayed.

           •   _n_o - Show no ignored files.

           •   _m_a_t_c_h_i_n_g - Shows ignored files and directories matching an ignore pattern.

           When _m_a_t_c_h_i_n_g mode is specified, paths that explicitly match an ignored pattern are shown.
           If a directory matches an ignore pattern, then it is shown, but not paths contained in the
           ignored directory. If a directory does not match an ignore pattern, but all contents are
           ignored, then the directory is not shown, but all contents are shown.

       -z
           Terminate entries with NUL, instead of LF. This implies the ----ppoorrcceellaaiinn==vv11 output format if
           no other format is given.

       --column[=<options>], --no-column
           Display untracked files in columns. See configuration variable ccoolluummnn..ssttaattuuss for option
           syntax.  ----ccoolluummnn and ----nnoo--ccoolluummnn without options are equivalent to _a_l_w_a_y_s and _n_e_v_e_r
           respectively.

       --ahead-behind, --no-ahead-behind
           Display or do not display detailed ahead/behind counts for the branch relative to its
           upstream branch. Defaults to true.

       --renames, --no-renames
           Turn on/off rename detection regardless of user configuration. See also ggiitt--ddiiffff(1)
           ----nnoo--rreennaammeess.

       --find-renames[=<n>]
           Turn on rename detection, optionally setting the similarity threshold. See also ggiitt--ddiiffff(1)
           ----ffiinndd--rreennaammeess.

       <pathspec>...
           See the _p_a_t_h_s_p_e_c entry in ggiittgglloossssaarryy(7).

OOUUTTPPUUTT
       The output from this command is designed to be used as a commit template comment. The default,
       long format, is designed to be human readable, verbose and descriptive. Its contents and format
       are subject to change at any time.

       The paths mentioned in the output, unlike many other Git commands, are made relative to the
       current directory if you are working in a subdirectory (this is on purpose, to help cutting and
       pasting). See the status.relativePaths config option below.

   SShhoorrtt FFoorrmmaatt
       In the short-format, the status of each path is shown as one of these forms

           XY PATH
           XY ORIG_PATH -> PATH

       where OORRIIGG__PPAATTHH is where the renamed/copied contents came from. OORRIIGG__PPAATTHH is only shown when
       the entry is renamed or copied. The XXYY is a two-letter status code.

       The fields (including the -->>) are separated from each other by a single space. If a filename
       contains whitespace or other nonprintable characters, that field will be quoted in the manner
       of a C string literal: surrounded by ASCII double quote (34) characters, and with interior
       special characters backslash-escaped.

       There are three different types of states that are shown using this format, and each one uses
       the XXYY syntax differently:

       •   When a merge is occurring and the merge was successful, or outside of a merge situation, XX
           shows the status of the index and YY shows the status of the working tree.

       •   When a merge conflict has occurred and has not yet been resolved, XX and YY show the state
           introduced by each head of the merge, relative to the common ancestor. These paths are said
           to be _u_n_m_e_r_g_e_d.

       •   When a path is untracked, XX and YY are always the same, since they are unknown to the index.
           ????  is used for untracked paths. Ignored files are not listed unless ----iiggnnoorreedd is used; if
           it is, ignored files are indicated by !!!!.

       Note that the term _m_e_r_g_e here also includes rebases using the default ----mmeerrggee strategy,
       cherry-picks, and anything else using the merge machinery.

       In the following table, these three classes are shown in separate sections, and these
       characters are used for XX and YY fields for the first two sections that show tracked paths:

       •   ' ' = unmodified

       •   _M = modified

       •   _A = added

       •   _D = deleted

       •   _R = renamed

       •   _C = copied

       •   _U = updated but unmerged

           X          Y     Meaning
           -------------------------------------------------
                    [AMD]   not updated
           M        [ MD]   updated in index
           A        [ MD]   added to index
           D                deleted from index
           R        [ MD]   renamed in index
           C        [ MD]   copied in index
           [MARC]           index and work tree matches
           [ MARC]     M    work tree changed since index
           [ MARC]     D    deleted in work tree
           [ D]        R    renamed in work tree
           [ D]        C    copied in work tree
           -------------------------------------------------
           D           D    unmerged, both deleted
           A           U    unmerged, added by us
           U           D    unmerged, deleted by them
           U           A    unmerged, added by them
           D           U    unmerged, deleted by us
           A           A    unmerged, both added
           U           U    unmerged, both modified
           -------------------------------------------------
           ?           ?    untracked
           !           !    ignored
           -------------------------------------------------

       Submodules have more state and instead report M the submodule has a different HEAD than
       recorded in the index m the submodule has modified content ? the submodule has untracked files
       since modified content or untracked files in a submodule cannot be added via ggiitt aadddd in the
       superproject to prepare a commit.

       _m and _? are applied recursively. For example if a nested submodule in a submodule contains an
       untracked file, this is reported as _? as well.

       If -b is used the short-format status is preceded by a line

           ## branchname tracking info

   PPoorrcceellaaiinn FFoorrmmaatt VVeerrssiioonn 11
       Version 1 porcelain format is similar to the short format, but is guaranteed not to change in a
       backwards-incompatible way between Git versions or based on user configuration. This makes it
       ideal for parsing by scripts. The description of the short format above also describes the
       porcelain format, with a few exceptions:

        1. The user’s color.status configuration is not respected; color will always be off.

        2. The user’s status.relativePaths configuration is not respected; paths shown will always be
           relative to the repository root.

       There is also an alternate -z format recommended for machine parsing. In that format, the
       status field is the same, but some other things change. First, the _-_> is omitted from rename
       entries and the field order is reversed (e.g _f_r_o_m _-_> _t_o becomes _t_o _f_r_o_m). Second, a NUL (ASCII
       0) follows each filename, replacing space as a field separator and the terminating newline (but
       a space still separates the status field from the first filename). Third, filenames containing
       special characters are not specially formatted; no quoting or backslash-escaping is performed.

       Any submodule changes are reported as modified MM instead of mm or single ??.

   PPoorrcceellaaiinn FFoorrmmaatt VVeerrssiioonn 22
       Version 2 format adds more detailed information about the state of the worktree and changed
       items. Version 2 also defines an extensible set of easy to parse optional headers.

       Header lines start with "#" and are added in response to specific command line arguments.
       Parsers should ignore headers they don’t recognize.

       BBrraanncchh HHeeaaddeerrss
           If ----bbrraanncchh is given, a series of header lines are printed with information about the
           current branch.

               Line                                     Notes
               ------------------------------------------------------------
               # branch.oid <commit> | (initial)        Current commit.
               # branch.head <branch> | (detached)      Current branch.
               # branch.upstream <upstream_branch>      If upstream is set.
               # branch.ab +<ahead> -<behind>           If upstream is set and
                                                        the commit is present.
               ------------------------------------------------------------

       CChhaannggeedd TTrraacckkeedd EEnnttrriieess
           Following the headers, a series of lines are printed for tracked entries. One of three
           different line formats may be used to describe an entry depending on the type of change.
           Tracked entries are printed in an undefined order; parsers should allow for a mixture of
           the 3 line types in any order.

           Ordinary changed entries have the following format:

               1 <XY> <sub> <mH> <mI> <mW> <hH> <hI> <path>

           Renamed or copied entries have the following format:

               2 <XY> <sub> <mH> <mI> <mW> <hH> <hI> <X><score> <path><sep><origPath>

               Field       Meaning
               --------------------------------------------------------
               <XY>        A 2 character field containing the staged and
                           unstaged XY values described in the short format,
                           with unchanged indicated by a "." rather than
                           a space.
               <sub>       A 4 character field describing the submodule state.
                           "N..." when the entry is not a submodule.
                           "S<c><m><u>" when the entry is a submodule.
                           <c> is "C" if the commit changed; otherwise ".".
                           <m> is "M" if it has tracked changes; otherwise ".".
                           <u> is "U" if there are untracked changes; otherwise ".".
               <mH>        The octal file mode in HEAD.
               <mI>        The octal file mode in the index.
               <mW>        The octal file mode in the worktree.
               <hH>        The object name in HEAD.
               <hI>        The object name in the index.
               <X><score>  The rename or copy score (denoting the percentage
                           of similarity between the source and target of the
                           move or copy). For example "R100" or "C75".
               <path>      The pathname.  In a renamed/copied entry, this
                           is the target path.
               <sep>       When the `-z` option is used, the 2 pathnames are separated
                           with a NUL (ASCII 0x00) byte; otherwise, a tab (ASCII 0x09)
                           byte separates them.
               <origPath>  The pathname in the commit at HEAD or in the index.
                           This is only present in a renamed/copied entry, and
                           tells where the renamed/copied contents came from.
               --------------------------------------------------------

           Unmerged entries have the following format; the first character is a "u" to distinguish
           from ordinary changed entries.

               u <xy> <sub> <m1> <m2> <m3> <mW> <h1> <h2> <h3> <path>

               Field       Meaning
               --------------------------------------------------------
               <XY>        A 2 character field describing the conflict type
                           as described in the short format.
               <sub>       A 4 character field describing the submodule state
                           as described above.
               <m1>        The octal file mode in stage 1.
               <m2>        The octal file mode in stage 2.
               <m3>        The octal file mode in stage 3.
               <mW>        The octal file mode in the worktree.
               <h1>        The object name in stage 1.
               <h2>        The object name in stage 2.
               <h3>        The object name in stage 3.
               <path>      The pathname.
               --------------------------------------------------------

       OOtthheerr IItteemmss
           Following the tracked entries (and if requested), a series of lines will be printed for
           untracked and then ignored items found in the worktree.

           Untracked items have the following format:

               ? <path>

           Ignored items have the following format:

               ! <path>

       PPaatthhnnaammee FFoorrmmaatt NNootteess aanndd --zz
           When the --zz option is given, pathnames are printed as is and without any quoting and lines
           are terminated with a NUL (ASCII 0x00) byte.

           Without the --zz option, pathnames with "unusual" characters are quoted as explained for the
           configuration variable ccoorree..qquuootteePPaatthh (see ggiitt--ccoonnffiigg(1)).

CCOONNFFIIGGUURRAATTIIOONN
       The command honors ccoolloorr..ssttaattuuss (or ssttaattuuss..ccoolloorr — they mean the same thing and the latter is
       kept for backward compatibility) and ccoolloorr..ssttaattuuss..<<sslloott>> configuration variables to colorize
       its output.

       If the config variable ssttaattuuss..rreellaattiivveePPaatthhss is set to false, then all paths shown are relative
       to the repository root, not to the current directory.

       If ssttaattuuss..ssuubbmmoodduulleeSSuummmmaarryy is set to a non zero number or true (identical to -1 or an unlimited
       number), the submodule summary will be enabled for the long format and a summary of commits for
       modified submodules will be shown (see --summary-limit option of ggiitt--ssuubbmmoodduullee(1)). Please note
       that the summary output from the status command will be suppressed for all submodules when
       ddiiffff..iiggnnoorreeSSuubbmmoodduulleess is set to _a_l_l or only for those submodules where
       ssuubbmmoodduullee..<<nnaammee>>..iiggnnoorree==aallll. To also view the summary for ignored submodules you can either use
       the --ignore-submodules=dirty command line option or the _g_i_t _s_u_b_m_o_d_u_l_e _s_u_m_m_a_r_y command, which
       shows a similar output but does not honor these settings.

BBAACCKKGGRROOUUNNDD RREEFFRREESSHH
       By default, ggiitt ssttaattuuss will automatically refresh the index, updating the cached stat
       information from the working tree and writing out the result. Writing out the updated index is
       an optimization that isn’t strictly necessary (ssttaattuuss computes the values for itself, but
       writing them out is just to save subsequent programs from repeating our computation). When
       ssttaattuuss is run in the background, the lock held during the write may conflict with other
       simultaneous processes, causing them to fail. Scripts running ssttaattuuss in the background should
       consider using ggiitt ----nnoo--ooppttiioonnaall--lloocckkss ssttaattuuss (see ggiitt(1) for details).

SSEEEE AALLSSOO
       ggiittiiggnnoorree(5)

GGIITT
       Part of the ggiitt(1) suite

Git 2.33.0                                    08/16/2021                                 GIT-STATUS(1)
